##引入mybatis支持
$!mybatisSupport

##设置保存名称与保存位置
$!callback.setFileName($tool.append($!{tableInfo.name}, "Mapper.xml"))
$!callback.setSavePath($tool.append($modulePath, "/src/main/resources/mapper"))

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}DAO">

    <resultMap type="$!{tableInfo.savePackageName}.model.entity.$!{tableInfo.name}" id="baseMap">
#foreach($column in $tableInfo.fullColumn)
        <result property="$!column.name" column="$!column.obj.name" jdbcType="$!column.ext.jdbcType"/>
#end
    </resultMap>
    
    <sql id="where">
        <where>
            <if test="eqWrapper != null">
                <foreach collection="eqWrapper.entrySet()" index="column" item="value">
                    <if test="column != null and value != null">
                        and `${column}` = #{value}
                    </if>
                </foreach>
            </if>
            <if test="neqWrapper != null">
                <foreach collection="neqWrapper.entrySet()" index="column" item="value">
                    <if test="column != null and value != null">
                        and `${column}` != #{value}
                    </if>
                </foreach>
            </if>
            <if test="inWrapper != null">
                <foreach collection="inWrapper.entrySet()" index="column" item="values">
                    <if test="values != null and values.size() > 0">
                        and `${column}` in
                        <foreach collection="values" item="value" open="(" separator="," close=")">
                            #{value}
                        </foreach>
                    </if>
                </foreach>
            </if>
            <if test="ninWrapper != null">
                <foreach collection="ninWrapper.entrySet()" index="column" item="values">
                    <if test="values != null and values.size() > 0">
                        and `${column}` not in
                        <foreach collection="values" item="value" open="(" separator="," close=")">
                            #{value}
                        </foreach>
                    </if>
                </foreach>
            </if>
            <if test="keyWrapper != null and keyWrapper.size() > 0">
                <foreach collection="keyWrapper.entrySet()" index="key" item="columns">
                    <if test="columns != null and columns.size() > 0">
                        and
                        <foreach collection="columns" item="column" open="(" separator=" or " close=")">
                            `${column}` like CONCAT('%',#{key},'%')
                        </foreach>
                    </if>
                </foreach>
            </if>
        </where>
    </sql>
    
    <select id="count" resultType="int">
        select COUNT(*) from `$!{tableInfo.obj.name}`
        <include refid="where"/>
    </select>
    
    <select id="select" resultMap="baseMap">
        select * from `$!{tableInfo.obj.name}` where `id` = #{id}
    </select>
    
    <select id="selectAll" resultMap="baseMap">
        select * from `$!{tableInfo.obj.name}`
    </select>
    
    <select id="selectWithQuery" resultMap="baseMap">
        select * from `$!{tableInfo.obj.name}`
        <include refid="where"/>
        <if test="sortWrapper != null and sortWrapper.size() > 0">
            order by
            <foreach collection="sortWrapper.entrySet()" index="s" item="o" separator=",">
                `${s}` ${o}
            </foreach>
        </if>
        <if test="offset != null and limit != null">
            limit ${offset}, ${limit}
        </if>
    </select>

    <insert id="insert">
        insert into `$!{tableInfo.obj.name}`
        (#foreach($column in $tableInfo.fullColumn)`$!column.obj.name`#if($velocityHasNext), #end#end)
        values
        (#foreach($column in $tableInfo.fullColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)
    </insert>

    <insert id="batchInsert" parameterType="list">
        insert into `$!{tableInfo.obj.name}`
        (#foreach($column in $tableInfo.fullColumn)`$!column.obj.name`#if($velocityHasNext), #end#end)
        values
        <foreach collection="list" item="item" separator=",">
            (#foreach($column in $tableInfo.fullColumn)#{item.$!{column.name}}#if($velocityHasNext), #end#end)
        </foreach>
    </insert>

    <delete id="delete" parameterType="string">
        delete from `$!{tableInfo.obj.name}` where `id` = #{id}
    </delete>

    <delete id="batchDelete" parameterType="list">
        delete from `$!{tableInfo.obj.name}` where `id` in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    
    <delete id="deleteWithQuery">
        delete from `$!{tableInfo.obj.name}`
        <include refid="where"/>
    </delete>
    
    <update id="update" parameterType="$!{tableInfo.savePackageName}.model.entity.$!{tableInfo.name}">
        update `$!{tableInfo.obj.name}`
        <set>
#foreach($column in $tableInfo.otherColumn)
            <if test="$!column.name != null">
                `$!column.obj.name` = #{$!column.name},
            </if>
#end
        </set>
        where `id` = #{id}
    </update>

    <update id="batchUpdate" parameterType="list">
        <foreach collection="list" item="item" open="" close="" separator=";">
            update `$!{tableInfo.obj.name}`
            <set>
#foreach($column in $tableInfo.otherColumn)
                <if test="item.$!column.name != null">
                    `$!column.obj.name` = #{item.$!column.name},
                </if>
#end
            </set>
            where `id` = #{item.id}
        </foreach>
    </update>
    
    <update id="updateWithQuery">
        update `$!{tableInfo.obj.name}`
        <set>
            <if test="upWrapper != null">
#foreach($column in $tableInfo.fullColumn)
                <if test="upWrapper.$!column.obj.name != null">
                    `$!column.obj.name` = #{upWrapper.$!column.obj.name},
                </if>
#end
            </if>
        </set>
        <include refid="where"/>
    </update>
</mapper>